// Module Qu·∫£n l√Ω Playlist
import { showNotification } from './notifications.js';
import { addToFavorites } from './favorites.js';

// Ch·ª©c nƒÉng th√™m b√†i h√°t v√†o playlist
function addSongToPlaylist(songIndex, songs) {
    const song = songs[songIndex];
    if (!song) return;

    // Hi·ªÉn th·ªã modal ch·ªçn playlist
    showPlaylistModal(song, songIndex);
}

// Hi·ªÉn th·ªã modal ch·ªçn playlist
function showPlaylistModal(song, songIndex) {
    const playlistModal = document.createElement('div');
    playlistModal.className = 'playlist-modal-overlay';
    playlistModal.innerHTML = `
        <div class="playlist-modal">
            <div class="playlist-modal-header">
                <h3>Th√™m v√†o Playlist</h3>
                <button class="close-playlist-modal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="playlist-modal-body">
                <div class="song-info-mini">
                    <img src="${song.image}" alt="${song.name}">
                    <div>
                        <strong>${song.name}</strong>
                        <span>${song.singer}</span>
                    </div>
                </div>
                <div class="playlist-options">
                    <div class="create-new-playlist">
                        <button class="create-playlist-btn">
                            <i class="fas fa-plus"></i>
                            <span>T·∫°o playlist m·ªõi</span>
                        </button>
                    </div>
                    <div class="existing-playlists">
                        <div class="playlist-item" data-playlist="favorites">
                            <i class="fas fa-heart"></i>
                            <span>Y√™u th√≠ch</span>
                            <button class="add-to-playlist-btn" data-playlist="favorites">Th√™m</button>
                        </div>
                        <div class="playlist-item" data-playlist="recently-played">
                            <i class="fas fa-history"></i>
                            <span>Ph√°t g·∫ßn ƒë√¢y</span>
                            <button class="add-to-playlist-btn" data-playlist="recently-played">Th√™m</button>
                        </div>
                        <div class="playlist-item" data-playlist="my-music">
                            <i class="fas fa-music"></i>
                            <span>Nh·∫°c c·ªßa t√¥i</span>
                            <button class="add-to-playlist-btn" data-playlist="my-music">Th√™m</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(playlistModal);
    setTimeout(() => playlistModal.classList.add('show'), 100);

    // X·ª≠ l√Ω n√∫t ƒë√≥ng
    const closeBtn = playlistModal.querySelector('.close-playlist-modal');
    closeBtn.addEventListener('click', () => {
        closePlaylistModal(playlistModal);
    });

    // X·ª≠ l√Ω t·∫°o playlist m·ªõi
    const createBtn = playlistModal.querySelector('.create-playlist-btn');
    createBtn.addEventListener('click', () => {
        createNewPlaylist(song);
        closePlaylistModal(playlistModal);
    });

    // X·ª≠ l√Ω th√™m v√†o playlist c√≥ s·∫µn
    const addToPlaylistBtns = playlistModal.querySelectorAll('.add-to-playlist-btn');
    addToPlaylistBtns.forEach(btn => {
        btn.addEventListener('click', (e) => {
            const playlistType = btn.dataset.playlist;
            addToExistingPlaylist(song, playlistType);
            closePlaylistModal(playlistModal);
        });
    });

    // ƒê√≥ng khi click overlay
    playlistModal.addEventListener('click', (e) => {
        if (e.target === playlistModal) {
            closePlaylistModal(playlistModal);
        }
    });
}

// ƒê√≥ng modal playlist
function closePlaylistModal(modal) {
    modal.classList.remove('show');
    setTimeout(() => {
        if (modal.parentNode) {
            modal.parentNode.removeChild(modal);
        }
    }, 300);
}

// T·∫°o playlist m·ªõi
function createNewPlaylist(song) {
    const playlistName = prompt('Nh·∫≠p t√™n playlist m·ªõi:');
    if (playlistName && playlistName.trim()) {
        try {
            // L·∫•y playlist hi·ªán c√≥ t·ª´ localStorage
            let playlists = JSON.parse(localStorage.getItem('userPlaylists') || '{}');
            
            // T·∫°o playlist m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
            if (!playlists[playlistName]) {
                playlists[playlistName] = [];
            }
            
            // Th√™m b√†i h√°t v√†o playlist
            const songExists = playlists[playlistName].some(s => 
                s.name === song.name && s.singer === song.singer
            );
            
            if (!songExists) {
                playlists[playlistName].push({
                    name: song.name,
                    singer: song.singer,
                    image: song.image,
                    music: song.music,
                    duration: song.duration,
                    dbId: song.dbId,
                    dbType: song.dbType
                });
                
                localStorage.setItem('userPlaylists', JSON.stringify(playlists));
                showNotification(`üéµ ƒê√£ th√™m "${song.name}" v√†o playlist "${playlistName}"!`, 'success');
            } else {
                showNotification(`‚ÑπÔ∏è B√†i h√°t ƒë√£ c√≥ trong playlist "${playlistName}"!`, 'info');
            }
        } catch (error) {
            showNotification('‚ùå C√≥ l·ªói khi t·∫°o playlist!', 'error');
        }
    }
}

// Th√™m v√†o playlist c√≥ s·∫µn
function addToExistingPlaylist(song, playlistType) {
    try {
        let message = '';
        
        switch (playlistType) {
            case 'favorites':
                addToFavorites(song);
                message = `üíñ ƒê√£ th√™m "${song.name}" v√†o y√™u th√≠ch!`;
                break;
                
            case 'recently-played':
                addToRecentlyPlayed(song);
                message = `üïê ƒê√£ th√™m "${song.name}" v√†o ph√°t g·∫ßn ƒë√¢y!`;
                break;
                
            case 'my-music':
                addToMyMusic(song);
                message = `üéµ ƒê√£ th√™m "${song.name}" v√†o nh·∫°c c·ªßa t√¥i!`;
                break;
                
            default:
                message = `‚úÖ ƒê√£ th√™m "${song.name}" v√†o playlist!`;
        }
        
        showNotification(message, 'success');
    } catch (error) {
        showNotification('‚ùå C√≥ l·ªói khi th√™m v√†o playlist!', 'error');
    }
}

// Th√™m v√†o danh s√°ch ph√°t g·∫ßn ƒë√¢y
function addToRecentlyPlayed(song) {
    let recentlyPlayed = JSON.parse(localStorage.getItem('recentlyPlayed') || '[]');
    
    // X√≥a n·∫øu ƒë√£ t·ªìn t·∫°i
    recentlyPlayed = recentlyPlayed.filter(s => 
        !(s.name === song.name && s.singer === song.singer)
    );
    
    // Th√™m v√†o ƒë·∫ßu danh s√°ch
    recentlyPlayed.unshift({
        name: song.name,
        singer: song.singer,
        image: song.image,
        music: song.music,
        duration: song.duration,
        dbId: song.dbId,
        dbType: song.dbType,
        playedAt: new Date().toISOString()
    });
    
    // Gi·ªõi h·∫°n 50 b√†i h√°t g·∫ßn ƒë√¢y
    if (recentlyPlayed.length > 50) {
        recentlyPlayed = recentlyPlayed.slice(0, 50);
    }
    
    localStorage.setItem('recentlyPlayed', JSON.stringify(recentlyPlayed));
}

// Th√™m v√†o nh·∫°c c·ªßa t√¥i
function addToMyMusic(song) {
    let myMusic = JSON.parse(localStorage.getItem('myMusicPlaylist') || '[]');
    
    // Ki·ªÉm tra xem b√†i h√°t ƒë√£ t·ªìn t·∫°i ch∆∞a
    const songExists = myMusic.some(s => 
        s.name === song.name && s.singer === song.singer
    );
    
    if (!songExists) {
        myMusic.push({
            name: song.name,
            singer: song.singer,
            image: song.image,
            music: song.music,
            duration: song.duration,
            dbId: song.dbId,
            dbType: song.dbType,
            addedAt: new Date().toISOString()
        });
        
        localStorage.setItem('myMusicPlaylist', JSON.stringify(myMusic));
    }
}

// Test ch·ª©c nƒÉng l∆∞u tr·ªØ playlist
function testPlaylistStorage() {
    try {
        // Test t·∫°o playlist
        const testSong = {
            name: 'Test Song',
            singer: 'Test Singer',
            image: 'test.jpg',
            music: 'test.mp3',
            duration: '3:30'
        };
        
        addToMyMusic(testSong);
        addToRecentlyPlayed(testSong);
        
        // Ki·ªÉm tra localStorage
        const myMusic = localStorage.getItem('myMusicPlaylist');
        const recentlyPlayed = localStorage.getItem('recentlyPlayed');
        
        if (myMusic && recentlyPlayed) {
            showNotification('‚úÖ Ch·ª©c nƒÉng playlist ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!', 'success');
        } else {
            showNotification('‚ùå C√≥ v·∫•n ƒë·ªÅ v·ªõi ch·ª©c nƒÉng playlist!', 'error');
        }
        
    } catch (error) {
        showNotification('‚ùå L·ªói test playlist!', 'error');
    }
}

export {
    addSongToPlaylist,
    showPlaylistModal,
    closePlaylistModal,
    createNewPlaylist,
    addToExistingPlaylist,
    addToRecentlyPlayed,
    addToMyMusic,
    testPlaylistStorage
}; 